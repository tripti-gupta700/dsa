import java.util.*;
public class day2ArrayEasy {
    public static void main(String[] args){
        System.out.println(Arrays.toString(removeDuplicates(new int[]{1,2,3,4,4,5})));
        System.out.println(Arrays.toString(removeElement(new int[]{1,2,3,4,4,5}, 4)));
        System.out.println(reverseString("hello"));
        System.out.println(reverseStringAnother("hello india"));
        System.out.println(maxProfit(new int[]{100,200,422,60,34,677}));
        System.out.println(Arrays.toString(mergeTwoSortedArrays(new int[]{1,2,3,4,5}, new int[]{6,7,8,9,10})));
        System.out.println(Arrays.toString(moveZerosToEnd(new int[]{1,0,2,4,0,3})));
        System.out.println(maxConsecutiveOnes(new int[]{1,1,0,1,1,1}));
        System.out.println(missingNumber(new int[]{1,0,3}));
    }
    // remove duplicates from an array
    private static int[] removeDuplicates(int[] arr){
        if(arr.length==0){return new int[0];}
        int i=0;
        for(int j=1; j<arr.length; j++){
            if(arr[j]!=arr[i]){
                i++;
                arr[i]=arr[j];
            }
        }
        return Arrays.copyOfRange(arr, 0, i+1);
    }
    // remove an element from the array
    private static int[] removeElement(int[] arr, int element){
       if(arr.length==0){return new int[0];}
       int i=0;
       for(int j=0; j<arr.length; j++){
        if(arr[j]!=element){
            arr[i]=arr[j];
            i++;
        }
       }
       return Arrays.copyOfRange(arr, 0, i);
    }
    // reverse a string
    private static String reverseString(String str){
        char[] ch=str.toCharArray();
        int i=0, j=ch.length-1;
        while(i<j){
            char temp=ch[i];
            ch[i]=ch[j];
            ch[j]=temp;
            i++;j--;
        }
        return new String(ch);
    }
    // there are many other ways try those too
    private static String reverseStringAnother(String str1){
        StringBuilder sb=new StringBuilder(str1);
        int i=0, j=sb.length()-1;
        while(i<j){
            char temp=sb.charAt(i);
            sb.setCharAt(i, sb.charAt(j));
            sb.setCharAt(j, temp);
            i++;j--;
        }
        return sb.toString();
    }
    // BEST TIME TO BUY AND SELL STOCKS
    // this problem states that if you have given prices of a stock for some days and you can either buy that or sell but you if have bought on day 1 you can only sell if you get profit otherwise if there is loss in selling you'll buy that stock too now you have to tell the max profit that can be generated by selling and buying the stocks
    private static int maxProfit(int[] prices) {
        int buyPrice=prices[0];
        int maxP=Integer.MIN_VALUE; //this is minus infinite so that if any value greater than -infinity will be there will be stored in max profit
        for(int i=1; i<prices.length; i++){
            if(buyPrice<prices[i]){
                int profit=prices[i]-buyPrice;
                maxP=Math.max(maxP, profit);
            }
            else{
                buyPrice=prices[i];
            }
        }
        return maxP;
    }

    // MERGE TWO SORTED ARRAYS
    private static int[] mergeTwoSortedArrays(int[] arr1, int[] arr2){
        int n = arr1.length;
        int m=arr2.length;
        int[] arr3=new int[n+m];
        int i=0, j=0, k=0;
        while(i<n && j<m){
            if(arr1[i]<arr2[j]){
                arr3[k++]=arr1[i++];
            }
            else{arr3[k++]=arr2[j++];}

        }
        while(i<n){
           arr3[k++]=arr1[i++]; 
        }
        while(j<m){
           arr3[k++]=arr2[j++]; 
        }
        return arr3;
    }
    // MOVE ZEROS TO END: {1,0,2,4,0,3}==={1,2,4,3,0,0}
    private static int[] moveZerosToEnd(int[] arr){
        int[] result = new int[arr.length];
        int j=0;
        for(int i=0; i<arr.length; i++){
            if(arr[i]!=0){
                result[j++]=arr[i];
            }
        }
        return result;
    }
    // MAXIMUM CONSECUTIVE ONE'S 
    private static int maxConsecutiveOnes(int[] nums){
        int count=0;
        int max=0;
        for(int i=0; i<nums.length; i++){
            if(nums[i]==1){
                count++;
                max=Math.max(max,count);
            }
            else{count=0;}
        }
        return max;
    }
    // MISSING NUMBER IN ARRAY : [1,0,3]: here n=3 and upto 3 we have 0,1,2,3 but 2 is missing here we have to find that
    private static int missingNumber(int[] nums) {
        int n = nums.length;
        int sum = (n * (n + 1)) / 2;
        for (int num : nums) {
            sum -= num;
        }
        return sum;
    }
}
